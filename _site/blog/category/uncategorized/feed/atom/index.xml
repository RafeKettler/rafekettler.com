<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">rafekettler.com</title>
  <subtitle type="text">My thoughts on programming and technology</subtitle>

  <updated>2011-02-24T21:49:55Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://www.rafekettler.com/blog" />
  <id>http://www.rafekettler.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://www.rafekettler.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://www.rafekettler.com/blog</uri>
    </author>
    <title type="html"><![CDATA[C resources that helped me]]></title>
    <link rel="alternate" type="text/html" href="http://www.rafekettler.com/blog/2011/02/18/c-resources-that-helped-me" />
    <id>http://www.rafekettler.com/blog/2011/02/18/c-resources-that-helped-me</id>
    <updated>2011-02-18T04:17:37Z</updated>
    <published>2011-02-18T04:17:37Z</published>
    <category scheme="http://www.rafekettler.com/blog" term="Uncategorized" />
    <summary type="html"><![CDATA[C resources that helped me]]></summary>
    <content type="html" xml:base="http://www.rafekettler.com/blog/2011/02/18/c-resources-that-helped-me"><![CDATA[<p>I've been picking up C a bit more lately, and it's been great so far. Along the way, I've picked up some great articles, books, and sites. I thought I'd post them for posterity and the convenience of anyone who might happen on this.</p>
<ul>
<li><a href="http://cslibrary.stanford.edu/101/EssentialC.pdf">The Essential C, by Nick Parlante</a> -- This is really a must for anyone who wants to relearn C or an experienced programmer who want a primer. It's only 50 pages, and it's quick and to the point. It's something that you could read and comprehend in a day if you wanted to. It's also very thorough -- most of the major language concepts see some coverage.</li>
<li><a href="http://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628">K&amp;R C, by Kernighan and Ritchie</a> -- no C programmer would be complete without it. If you have to ask, you shouldn't be using C.</li>
<li><a href="http://c-faq.com/">comp.lang.c FAQ</a> -- it's a great FAQ. Quite thorough. Even if you don't have a specific question, it's very educational to peruse: you can pick up nice bits and pieces of advice along the way.</li>
<li><a href="http://www.jetcafe.org/jim/highlowc.html">High and Low Level C by Jim Larson</a> -- sort of a guide to doing things in C that it wasn't really designed to do (closures, classes, GC), and sort of a guide to low level hacks. It's a good overview of some cool hacks in C that can come in handy for the advanced C coder.</li>
<li><a href="http://www.open-std.org/JTC1/SC22/WG14/">The ISO C standard</a> -- again, if you have to ask...</li>
<li><a href="http://gcc.gnu.org/onlinedocs/gcc-4.5.2/gcc.pdf">The GCC manual</a> -- everyone's favorite C compiler has quite a few options and quite a few associated tricks. Also, GNU C is, in many ways, a superset of C itself -- it allows a number of things that the standard does not (like nested functions). It's nice to know what those features are.</li>
<li><a href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/developers-handbook/secure.html">The FreeBSD handbook's section on secure programming</a> -- programming in C, especially with strings, can be dangerous. This is the most comprehensive guide to programming securely that I've found so far.</li>
</ul>
<p>If I come across any other good resources, I'll add them.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://www.rafekettler.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Magic Methods Guide is Complete]]></title>
    <link rel="alternate" type="text/html" href="http://www.rafekettler.com/blog/2011/01/24/magic-methods-guide-is-complete" />
    <id>http://www.rafekettler.com/blog/2011/01/24/magic-methods-guide-is-complete</id>
    <updated>2011-01-24T23:26:57Z</updated>
    <published>2011-01-24T23:26:57Z</published>
    <category scheme="http://www.rafekettler.com/blog" term="Uncategorized" />
    <summary type="html"><![CDATA[Magic Methods Guide is Complete]]></summary>
    <content type="html" xml:base="http://www.rafekettler.com/blog/2011/01/24/magic-methods-guide-is-complete"><![CDATA[<p>It's finally done (feature-complete, I mean). It still may have errors, but it works. Check it out <a href="http://www.rafekettler.com/magicmethods.html">here</a>.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://www.rafekettler.com/blog</uri>
    </author>
    <title type="html"><![CDATA[The magic methods guide now has a github repo]]></title>
    <link rel="alternate" type="text/html" href="http://www.rafekettler.com/blog/2011/01/20/the-magic-methods-guide-now-has-a-github-repo" />
    <id>http://www.rafekettler.com/blog/2011/01/20/the-magic-methods-guide-now-has-a-github-repo</id>
    <updated>2011-01-20T04:56:35Z</updated>
    <published>2011-01-20T04:56:35Z</published>
    <category scheme="http://www.rafekettler.com/blog" term="Uncategorized" />
    <summary type="html"><![CDATA[The magic methods guide now has a github repo]]></summary>
    <content type="html" xml:base="http://www.rafekettler.com/blog/2011/01/20/the-magic-methods-guide-now-has-a-github-repo"><![CDATA[<p>Check out the github repo for the magic methods guide at http://www.github.com/RafeKettler/magicmethods. Maybe you could even try and find an issue?</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://www.rafekettler.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Magic Method Monday: custom attribute access]]></title>
    <link rel="alternate" type="text/html" href="http://www.rafekettler.com/blog/2010/12/06/magic-method-monday-custom-attribute-access" />
    <id>http://www.rafekettler.com/blog/2010/12/06/magic-method-monday-custom-attribute-access</id>
    <updated>2010-12-06T17:29:03Z</updated>
    <published>2010-12-06T17:29:03Z</published>
    <category scheme="http://www.rafekettler.com/blog" term="Uncategorized" />
    <summary type="html"><![CDATA[Magic Method Monday: custom attribute access]]></summary>
    <content type="html" xml:base="http://www.rafekettler.com/blog/2010/12/06/magic-method-monday-custom-attribute-access"><![CDATA[<p>We've been a long way through Magic Method Monday, and now it's time to get to some of the more advance magic methods. Today, it's <code>__getattr__</code>, <code>__setattr__</code>, <code>__delattr__</code>, and <code>__getattribute__</code>.</p>
<p><code>__getattr__</code></p>
<p><code>__getattr__</code> defines behavior when an attribute that doesn't exist (either yet or at all) is accessed. It takes the arguments <code>self</code> and <code>name</code>, where <code>name</code> is the name of the attribute that is being accessed. It's essentially a way to define behavior for "attribute not found", and according to the documentation, it can go two ways: either compute an attribute, or raise an AttributeError.</p>
<p><code>__setattr__</code></p>
<p><code>__setattr__</code>, though it may seem related to <code>__getattr__</code>, behaves very differently. <code>__setattr__</code> defines behavior whenever an attribute of a class is assigned to. It takes the arguments <code>self</code>, <code>name</code> where <code>name</code> is the name of the attribute, and <code>value</code>. Note that some special behavior must be taken when defining <code>__setattr__</code>:</p>
<div class="pygments_tango"><pre><span class="c"># wrong way to use __setattr__</span>
<span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">value</span>
    <span class="c"># since every time an attribute is assigned, __setattr__() is called, this</span>
    <span class="c"># is recursion.</span>
    <span class="c"># so this really means self.__setattr__(name, value). Since the method</span>
    <span class="c"># keeps calling itself, the recursion goes on forever causing a crash</span>

<p><span class="c"># the right way to do it</span>
<span class="k">def</span> <span class="nf"><strong>setattr</strong></span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n"><strong>dict</strong></span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span> <span class="c"># assigning to the dict of names in the class</span>
    <span class="c"># define custom behavior here</span>
</pre></div></p>
<p><code>__delattr__</code></p>
<p>You should already know what it does. <code>__delattr__</code> takes arguments <code>self</code> and <code>name</code> and defines custom behavior for when an attribute is deleted.</p>
<p><code>__getattribute__</code></p>
<p>You want to define behavior for every time a function is accessed? Well, you're in luck. You can use this (only in new-style classes, mind you, which you can get by placing <code>__metaclass__ = type</code> at the top of the script, or by subclassing <code>object</code> or another new-style class). It takes arguments <code>self</code> and <code>name</code>, and it can be quite useful (though it must be used with care, as it can also cause infinite recursion).  It's best that you read <a href="http://docs.python.org/reference/datamodel.html#object.__getattribute__">the documentation for <strong>getattribute</strong>()</a> yourself to get an idea of what to do and what not to do.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://www.rafekettler.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Hello world!]]></title>
    <link rel="alternate" type="text/html" href="http://www.rafekettler.com/blog/2010/08/09/hello-world" />
    <id>http://www.rafekettler.com/blog/2010/08/09/hello-world</id>
    <updated>2010-08-09T21:33:26Z</updated>
    <published>2010-08-09T21:33:26Z</published>
    <category scheme="http://www.rafekettler.com/blog" term="Uncategorized" />
    <summary type="html"><![CDATA[Hello world!]]></summary>
    <content type="html" xml:base="http://www.rafekettler.com/blog/2010/08/09/hello-world"><![CDATA[<p>I'm hard at work getting the blog up and running. Thanks for the patience.</p>
<div class="pygments_tango"><pre><span class="k">print</span> <span class="s">&quot;Hello world!&quot;</span>
</pre></div>]]></content>
  </entry>
</feed>
