---
categories: Magic Method Monday, Python, Programming
date: 2011/01/03 05:25:06
guid: http://rafekettler.com/?p=235
tags: Python links, Magic-Method-Monday, OOP
title: 'Magic Method Monday: Context Managers'
---
In Python 2.5, a new keyword was introduced in Python along with a new method for code reuse, the `with` statement. The concept of context managers was hardly new in Python (it was implemented before as a part of the library, I believe), but not until [PEP 343](http://www.python.org/dev/peps/pep-0343/) was accepted did it achieve status as a first class language construct. Usage for the `with` statement is simple:

$$code(lang=python)
with A() as a:
    # do something
$$/code

You're probably wondering what the point of all of this is. It might look innocuous at first, but there's some magic going on behind the scenes (and, as always with Python, you can take control of that magic for yourself).

`__enter__`

Defines what the context manager (the `with` statement) should do at the beginning of the block. It takes the argument `self`. Whatever it returns get bound to the _target_ in the `with` statement (the name after `as`), so you could in fact use `__enter__` to create a completely new object altogether (if you'd like).

`__exit__`

Gets loaded at the start of the block and executed after the block. It can commonly be used to handle exceptions, perform cleanup (closing a file or connection), or do something that is always done immediately after we're finished with an object. Unlike `__enter__`, `__exit__` takes several arguments, `self`, `exception_type`, `exception_value`, and `traceback`. If there's no exception, the last 3 arguments will be `None`. Otherwise, you can either choose to handle the exception or let it get handled by the user; if you want to handle it, make sure `__exit__` returns `True` after all is said and done. Otherwise, let the exception happen.
